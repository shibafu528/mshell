//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: shell.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Mrpc_Shell_ShellServiceClient`, then call methods of this protocol to make API calls.
public protocol Mrpc_Shell_ShellServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mrpc_Shell_ShellServiceClientInterceptorFactoryProtocol? { get }

  func queryRootWindow(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Mrpc_Shell_QueryRootWindowResponse>
}

extension Mrpc_Shell_ShellServiceClientProtocol {
  public var serviceName: String {
    return "mrpc.shell.ShellService"
  }

  /// Unary call to QueryRootWindow
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryRootWindow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func queryRootWindow(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Mrpc_Shell_QueryRootWindowResponse> {
    return self.makeUnaryCall(
      path: "/mrpc.shell.ShellService/QueryRootWindow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryRootWindowInterceptors() ?? []
    )
  }
}

public protocol Mrpc_Shell_ShellServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'queryRootWindow'.
  func makeQueryRootWindowInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Mrpc_Shell_QueryRootWindowResponse>]
}

public final class Mrpc_Shell_ShellServiceClient: Mrpc_Shell_ShellServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Mrpc_Shell_ShellServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mrpc.shell.ShellService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mrpc_Shell_ShellServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Mrpc_Shell_ShellServiceProvider: CallHandlerProvider {
  var interceptors: Mrpc_Shell_ShellServiceServerInterceptorFactoryProtocol? { get }

  func queryRootWindow(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Mrpc_Shell_QueryRootWindowResponse>
}

extension Mrpc_Shell_ShellServiceProvider {
  public var serviceName: Substring { return "mrpc.shell.ShellService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryRootWindow":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Mrpc_Shell_QueryRootWindowResponse>(),
        interceptors: self.interceptors?.makeQueryRootWindowInterceptors() ?? [],
        userFunction: self.queryRootWindow(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Mrpc_Shell_ShellServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'queryRootWindow'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryRootWindowInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Mrpc_Shell_QueryRootWindowResponse>]
}
