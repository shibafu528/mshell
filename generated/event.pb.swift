// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Mrpc_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var eventID: UInt64 = 0

  public var param: [Mrpc_Param] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mrpc_Param {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var val: Mrpc_Param.OneOf_Val? = nil

  public var sval: String {
    get {
      if case .sval(let v)? = val {return v}
      return String()
    }
    set {val = .sval(newValue)}
  }

  public var ival: Int64 {
    get {
      if case .ival(let v)? = val {return v}
      return 0
    }
    set {val = .ival(newValue)}
  }

  public var dval: Double {
    get {
      if case .dval(let v)? = val {return v}
      return 0
    }
    set {val = .dval(newValue)}
  }

  public var bval: Bool {
    get {
      if case .bval(let v)? = val {return v}
      return false
    }
    set {val = .bval(newValue)}
  }

  public var time: Google_Protobuf_Timestamp {
    get {
      if case .time(let v)? = val {return v}
      return Google_Protobuf_Timestamp()
    }
    set {val = .time(newValue)}
  }

  public var proxy: Mrpc_Proxy {
    get {
      if case .proxy(let v)? = val {return v}
      return Mrpc_Proxy()
    }
    set {val = .proxy(newValue)}
  }

  public var error: String {
    get {
      if case .error(let v)? = val {return v}
      return String()
    }
    set {val = .error(newValue)}
  }

  public var sequence: Mrpc_Param.Sequence {
    get {
      if case .sequence(let v)? = val {return v}
      return Mrpc_Param.Sequence()
    }
    set {val = .sequence(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Val: Equatable {
    case sval(String)
    case ival(Int64)
    case dval(Double)
    case bval(Bool)
    case time(Google_Protobuf_Timestamp)
    case proxy(Mrpc_Proxy)
    case error(String)
    case sequence(Mrpc_Param.Sequence)

  #if !swift(>=4.1)
    public static func ==(lhs: Mrpc_Param.OneOf_Val, rhs: Mrpc_Param.OneOf_Val) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.sval, .sval): return {
        guard case .sval(let l) = lhs, case .sval(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ival, .ival): return {
        guard case .ival(let l) = lhs, case .ival(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dval, .dval): return {
        guard case .dval(let l) = lhs, case .dval(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.bval, .bval): return {
        guard case .bval(let l) = lhs, case .bval(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.time, .time): return {
        guard case .time(let l) = lhs, case .time(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.proxy, .proxy): return {
        guard case .proxy(let l) = lhs, case .proxy(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sequence, .sequence): return {
        guard case .sequence(let l) = lhs, case .sequence(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct Sequence {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var val: [Mrpc_Param] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Mrpc_Proxy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var classID: String = String()

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mrpc_ProxyQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subject: Mrpc_Proxy {
    get {return _subject ?? Mrpc_Proxy()}
    set {_subject = newValue}
  }
  /// Returns true if `subject` has been explicitly set.
  public var hasSubject: Bool {return self._subject != nil}
  /// Clears the value of `subject`. Subsequent reads from it will return its default value.
  public mutating func clearSubject() {self._subject = nil}

  public var selection: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _subject: Mrpc_Proxy? = nil
}

public struct Mrpc_ProxyValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subject: Mrpc_Proxy {
    get {return _subject ?? Mrpc_Proxy()}
    set {_subject = newValue}
  }
  /// Returns true if `subject` has been explicitly set.
  public var hasSubject: Bool {return self._subject != nil}
  /// Clears the value of `subject`. Subsequent reads from it will return its default value.
  public mutating func clearSubject() {self._subject = nil}

  public var selection: String = String()

  public var response: Mrpc_Param {
    get {return _response ?? Mrpc_Param()}
    set {_response = newValue}
  }
  /// Returns true if `response` has been explicitly set.
  public var hasResponse: Bool {return self._response != nil}
  /// Clears the value of `response`. Subsequent reads from it will return its default value.
  public mutating func clearResponse() {self._response = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _subject: Mrpc_Proxy? = nil
  fileprivate var _response: Mrpc_Param? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mrpc"

extension Mrpc_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Event"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "event_id"),
    3: .same(proto: "param"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularFixed64Field(value: &self.eventID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.param) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.eventID != 0 {
      try visitor.visitSingularFixed64Field(value: self.eventID, fieldNumber: 2)
    }
    if !self.param.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.param, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mrpc_Event, rhs: Mrpc_Event) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.eventID != rhs.eventID {return false}
    if lhs.param != rhs.param {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mrpc_Param: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Param"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sval"),
    2: .same(proto: "ival"),
    3: .same(proto: "dval"),
    4: .same(proto: "bval"),
    5: .same(proto: "time"),
    6: .same(proto: "proxy"),
    7: .same(proto: "error"),
    8: .same(proto: "sequence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.val != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.val = .sval(v)}
      }()
      case 2: try {
        if self.val != nil {try decoder.handleConflictingOneOf()}
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {self.val = .ival(v)}
      }()
      case 3: try {
        if self.val != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.val = .dval(v)}
      }()
      case 4: try {
        if self.val != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.val = .bval(v)}
      }()
      case 5: try {
        var v: Google_Protobuf_Timestamp?
        if let current = self.val {
          try decoder.handleConflictingOneOf()
          if case .time(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.val = .time(v)}
      }()
      case 6: try {
        var v: Mrpc_Proxy?
        if let current = self.val {
          try decoder.handleConflictingOneOf()
          if case .proxy(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.val = .proxy(v)}
      }()
      case 7: try {
        if self.val != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.val = .error(v)}
      }()
      case 8: try {
        var v: Mrpc_Param.Sequence?
        if let current = self.val {
          try decoder.handleConflictingOneOf()
          if case .sequence(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.val = .sequence(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.val {
    case .sval?: try {
      guard case .sval(let v)? = self.val else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .ival?: try {
      guard case .ival(let v)? = self.val else { preconditionFailure() }
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    }()
    case .dval?: try {
      guard case .dval(let v)? = self.val else { preconditionFailure() }
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }()
    case .bval?: try {
      guard case .bval(let v)? = self.val else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }()
    case .time?: try {
      guard case .time(let v)? = self.val else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .proxy?: try {
      guard case .proxy(let v)? = self.val else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .error?: try {
      guard case .error(let v)? = self.val else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }()
    case .sequence?: try {
      guard case .sequence(let v)? = self.val else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mrpc_Param, rhs: Mrpc_Param) -> Bool {
    if lhs.val != rhs.val {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mrpc_Param.Sequence: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Mrpc_Param.protoMessageName + ".Sequence"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "val"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.val) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.val.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.val, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mrpc_Param.Sequence, rhs: Mrpc_Param.Sequence) -> Bool {
    if lhs.val != rhs.val {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mrpc_Proxy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Proxy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "class_id"),
    2: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.classID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.classID.isEmpty {
      try visitor.visitSingularStringField(value: self.classID, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mrpc_Proxy, rhs: Mrpc_Proxy) -> Bool {
    if lhs.classID != rhs.classID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mrpc_ProxyQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProxyQuery"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subject"),
    2: .same(proto: "selection"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._subject) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.selection) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._subject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.selection.isEmpty {
      try visitor.visitSingularStringField(value: self.selection, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mrpc_ProxyQuery, rhs: Mrpc_ProxyQuery) -> Bool {
    if lhs._subject != rhs._subject {return false}
    if lhs.selection != rhs.selection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mrpc_ProxyValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProxyValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subject"),
    2: .same(proto: "selection"),
    3: .same(proto: "response"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._subject) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.selection) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._response) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._subject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.selection.isEmpty {
      try visitor.visitSingularStringField(value: self.selection, fieldNumber: 2)
    }
    if let v = self._response {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mrpc_ProxyValue, rhs: Mrpc_ProxyValue) -> Bool {
    if lhs._subject != rhs._subject {return false}
    if lhs.selection != rhs.selection {return false}
    if lhs._response != rhs._response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
